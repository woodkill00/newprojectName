### PYTHON ANYWHERE ###

info from PythonAnywhere -
Source code:
/home/woodkill/newprojectName/

Working directory:
/home/woodkill/

WSGI configuration file:/var/www/woodkill_pythonanywhere_com_wsgi.py


URL	        Directory
/static/	/home/woodkill/newprojectName/django/static_root/





-- @ dashboard new bash console
-- git clone https://github.com/woodkill00/newprojectName.git
-- mkvirtualenv --python=/usr/bin/python3.8 mysite-virtualenv
-- pip install django ## # may take a long time to install
-- pip install -r requirements.txt
-- @ WEB TAB - create new web app - under manaual configuration
    -- select your python version same as env
    -- configure virtualenv - enter the path to the env - mysite-virtualenv
    -- WSGI config - click location on python-ANYWHERE
    import os
    import sys

    path = '/home/woodkill/newprojectName/django/'
    if path not in sys.path:
        sys.path.insert(0, path)

    os.environ['DJANGO_SETTINGS_MODULE'] = 'config.settings'

    from django.core.wsgi import get_wsgi_application
    application = get_wsgi_application()



-- add .env file to django dir
-- python manage.py migrate
-- python manage.py collectstatic
-- python manage.py createsuperuser



### Automatically deploying Django app to PythonAnywhere through GitHub ###
First:
Install the Python package named GitPython by using the following command:
$ pip install GitPython
Second:
Write the view function that will receive the update and update the code on the server.

Go to your views.py and add the following code:
import git
from django.shortcuts import render
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def update(request):
    if request.method == "POST":
        '''
        pass the path of the diectory where your project will be 
        stored on PythonAnywhere in the git.Repo() as parameter.
        Here the name of my directory is "test.pythonanywhere.com"
        '''
        repo = git.Repo("woodkill.pythonanywhere.com/") 
        origin = repo.remotes.origin

        origin.pull()

        return HttpResponse("Updated code on PythonAnywhere")
    else:
        return HttpResponse("Couldn't update the code on PythonAnywhere")

You can also send response codes with them by passing the parameter "status" within the "HttpResponse" that will be returned.

Third:
Set the URL where the Payload from GitHub will be sent.

To add the payload URL add the following lines into urls.py file of your Django Project:
from django.urls import path

'''
here the name of my app is updater so I add the import my view from there
replace updater with your app-name where you have your views.py
'''
from updater import views

urlpatterns = [
    path("updateServer/", views.update, name="update"),
]

Fourth:
Now push this code to GitHub and login to our account on PythonAnywhere.

Now follow the following steps:

Step 1: Open a bash terminal on PythonAnywhere.

Step 2: Issue the following command:
$ ssh-keygen -t rsa -b 4096 -C "thejunkmailvoid@gmail.com"
after this command you will be shown the following prompt:
> Generating public/private rsa key pair.

Step 3: When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.
> Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter]

Step 4: At the prompt, type a secure passphrase.
> Enter passphrase (empty for no passphrase): [Type a passphrase]
> Enter same passphrase again: [Type passphrase again]

Step 5: Issue the following command on the bash terminal of PythonAnywhere to get your key.
$ cat ~/.ssh/id_rsa.pub 
then press CTRL+C to copy the key.

Fifth:
Go to your GitHub Account and then Go to the Repository in which you have your Django Project.

Then follow the following steps:

Step 1: From your repository, click Settings as shown below.

Alt Text

Step 2: In the sidebar, click Deploy Keys, then click Add deploy key.

Alt Text

Step 3: Provide a title, paste in your public key.

Alt Text

Step 4: Select Allow write access if you want this key to have write access to the repository. A deploy key with write access lets a deployment push to the repository.

Step 5: Click Add key.

Sixth:
Go to your PythonAnywhere account and go to the bash terminal and setup your Web-App but use the SSH instead of HTTPS for cloning your Repository from GitHub.

Note: I would suggest to use the automated script pa_autoconfigure_django.py available in pythonanywhere package which can be installed via pip to automatically setup my project on PythonAnywhere.

If you already have a project setup on PythonAnywhere using HTTPS then open a bash terminal and edit the remote URL to set SSH by using the following command :
$ git remote set-url origin https://github.com/woodkill00/newprojectName.git
Seventh:
Go back to the settings tab of your Repository on GitHub and follow the following steps :

Step 1: In the sidebar, click Webhooks, then click Add webhook.

Alt Text

Step 2: Fill in the Payload URL and set the "Content type" to "application/json" as shown below.

Alt Text

Step 3: click "Add webhook".

Finally:
You will see the following when it is success

Alt Text

If it show some other icon in place of a green tick then click on edit and at the bottom you can see the "Recent Deliveries" here you can click on the button shown below to see the details of that delivery.

Alt Text

After clicking you will see two tabs "Request" and "Response" to see the details of failure you can click on response and you will get the details as shown below

Alt Text

If you get any response code other than 200 then go to the error log on your PythonAnywhere account and check what's the problem.

The most common mistake that I make is when I return something else instead of HttpResponse it will throw some Attribute error.

If you get stuck somewhere then feel free to contact me on telegram using the link https://t.me/soumya_r .


Auto-reloading your webapp
We‚Äôre going to use git hooks to do it. These are shell commands executed after a git event takes place. There‚Äôs no post-pull hook, but‚Ä¶

We take advantage of the fact that a git pull is nothing but a git fetch ‚Üí git merge and there is a post-merge hook. It executes if the pull completed successfully.

In your git repo over at PythonAnywhere go to .git/hooks/

There will be a bunch of pre-existing ones but make a new file called post-merge.

Put the following code there:
#!/bin/sh
# touch /path/to/username_pythonanywhere_com_wsgi.py
touch /var/www/woodkill_pythonanywhere_com_wsgi.py
Use the path to your wsgi file which when touched, reloads your webapp.

Now to make this executable, open a bash console there and run

chmod +x post-merge

That‚Äôs it, now you can test that it works by making a sample commit.

Most importantly, now we move on to securing your webhook.


Securing your webhook
This is necessary so that someone else cannot spam your server with requests to update it.

We follow this guide for it https://developer.github.com/webhooks/securing/


from dotenv import load_dotenv
# project_folder = os.path.expanduser('~/my-project-dir')  # adjust as appropriate
project_folder = os.path.expanduser('~/home/woodkill/newprojectName/django/')
load_dotenv(os.path.join(project_folder, '.env'))




First off, export that secret token and add it to PythonAnywhere as an environment variable as well as in the Secret field in your GitHub webhook settings. This might be helpful https://help.pythonanywhere.com/pages/environment-variables-for-web-apps

Now, GitHub lists their method in Ruby but we use Python so while the method is same, here is the comparison function:

import hmac
import hashlib

def is_valid_signature(x_hub_signature, data, private_key):
    # x_hub_signature and data are from the webhook payload
    # private key is your webhook secret
    hash_algorithm, github_signature = x_hub_signature.split('=', 1)
    algorithm = hashlib.__dict__.get(hash_algorithm)
    encoded_key = bytes(private_key, 'latin-1')
    mac = hmac.new(encoded_key, msg=data, digestmod=algorithm)
    return hmac.compare_digest(mac.hexdigest(), github_signature)
view rawcheck_signature.py hosted with ‚ù§ by GitHub
Now, modify your update_server route to check if signature is valid by adding these lines before the updation part of your route:
x_hub_signature = request.headers.get(‚ÄòX-Hub-Signature‚Äô)

if not is_valid_signature(x_hub_signature, request.data, w_secret):
w_secret is supposed to be your webhooks secret that you set as an environment variable.

Now it doesn‚Äôt make much sense to have no logging as well as no other security checks to verify that the webhook is in fact from GitHub or that the pull event actually contained data, so you can go and copy paste the route on my repo that contains all that into your own and modify it for yourself where necessary, you already know the important parts by now üòÉ

I hope this was helpful, I know it‚Äôs a bit detailed but I wanted you to know what‚Äôs happening. If you found it too long, you could get away with copy pasting a lot of it after configuring the webhook over at GitHub and making the git hook.

I obviously didn‚Äôt come up with it myself, rather I‚Äôd say I just cherry picked the right parts from the right places and experimented in the hope that this can be a complete resource.

Here are the references so you can know and do more with it.

https://stackoverflow.com/a/54268132/9044659 (basic setup)
https://developer.github.com/webhooks/ (GitHub webhooks documentation)
https://github.com/CCExtractor/sample-platform/blob/master/mod_deploy/controllers.py (detailed implementation with better checks, in case you want to go all in)
https://github.com/SwagLyrics/swaglyrics-issue-maker/blob/35d23d0ba416e742e381da931d592ce6f58fc13f/issue_maker.py#L268 (my own route to update PythonAnywhere)
https://github.com/SwagLyrics/SwagLyrics-For-Spotify (this is where I use it, shameless repo plug to get stars ‚ù§Ô∏è)
Please let me know if there is any part that can be improved or made easier to understand.

Thanks a lot for reading!

P. S. I did stay up way late doing this, the things we do for science sigh






